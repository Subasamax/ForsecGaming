{"ast":null,"code":"var _jsxFileName = \"/home/dreaminsub/ReactProjects/gameSharing/game_sharing/src/components/react-tetris/src/components/tetris/tetris.js\";\nimport React, { Component } from 'react';\nimport { Tetromino } from './tetromino';\nimport { Board } from './board';\nimport { Block } from './block';\nimport { Controls } from './Controls';\nimport { Score } from './Score';\nimport { settings } from './settings';\nimport { createMatrix, rotateMatrix } from './helpers';\nimport TetrominoModel from '../../models/tetromino-model';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Tetris extends Component {\n  constructor(props) {\n    super(props);\n    this.initializeBoard = () => {\n      return createMatrix(this.settings.rows, this.settings.columns);\n    };\n    this.initializeTetrominoesArray = () => {\n      const numberOfTetrominoes = TetrominoModel.getNumberOfTetrominoes();\n      const tetrominoesArray = new Array(numberOfTetrominoes).fill(null).map(spot => Math.random() * numberOfTetrominoes | 0);\n      return tetrominoesArray;\n    };\n    this.getStartPoint = matrix => {\n      let finalRow = 0,\n        finalColumn = 0;\n      for (let rowIndex = 0; rowIndex < matrix.length; rowIndex++) {\n        const row = matrix[rowIndex];\n        if (row.some(cell => cell !== 0)) {\n          const columnIndex = this.state.boardMatrix[0].length / 2 - matrix.length / 2 | 0;\n          finalRow = 0 - rowIndex;\n          finalColumn = columnIndex;\n          return {\n            row: finalRow,\n            column: finalColumn\n          };\n        }\n      }\n      return {\n        row: 0,\n        column: 0\n      };\n    };\n    this.getNewTetromino = () => {\n      const {\n        tetrominoesArray\n      } = this.state;\n      const tetrominoIndex = tetrominoesArray.shift();\n      const startPoint = this.getStartPoint(TetrominoModel.getTetrominoesArray()[tetrominoIndex]);\n      const newTetromino = new TetrominoModel(startPoint.column, startPoint.row, tetrominoIndex);\n      const tetrominoMatrix = newTetromino.matrix;\n      tetrominoesArray.push(Math.random() * TetrominoModel.getNumberOfTetrominoes() | 0);\n      this.setState({\n        tetrominoesArray,\n        tetrominoMatrix,\n        rotationAngle: 0\n      });\n      return newTetromino;\n    };\n    this.getFreeBottomRow = () => {\n      const tetromino = Object.assign(new TetrominoModel(), this.state.tetromino);\n      const initialRow = tetromino.row;\n      tetromino.row++;\n      while (!tetromino.collidesWith(this.state.boardMatrix)) {\n        tetromino.row++;\n      }\n      const result = tetromino.row - initialRow - 1;\n      return result;\n    };\n    this.moveTetromino = direction => {\n      let tetromino = Object.assign(new TetrominoModel(), this.state.tetromino);\n      tetromino.collidesWith.bind(tetromino);\n      let rowAdvance = 0,\n        columnAdvance = 0;\n      let mustUpdate = true;\n      const {\n        boardMatrix\n      } = this.state;\n      switch (direction) {\n        case 'DOWN':\n          rowAdvance++;\n          break;\n        case 'LEFT':\n          columnAdvance--;\n          break;\n        case 'RIGHT':\n          columnAdvance++;\n          break;\n        case 'BOTTOM':\n          rowAdvance += this.getFreeBottomRow();\n          break;\n        default:\n          console.log('error. No such direction');\n      }\n      tetromino.row += rowAdvance;\n      tetromino.column += columnAdvance;\n      //If collided, move back\n      if (tetromino.collidesWith(boardMatrix)) {\n        tetromino.row -= rowAdvance;\n        tetromino.column -= columnAdvance;\n        mustUpdate = false;\n      }\n      //restores animation\n      if (mustUpdate) {\n        this.setState({\n          tetromino,\n          animation: true\n        });\n      }\n    };\n    this.rotateTetromino = () => {\n      let tetromino = Object.assign(new TetrominoModel(), this.state.tetromino);\n      let rotationAngle = this.state.rotationAngle;\n      tetromino.matrix = rotateMatrix(tetromino.matrix, 'RIGHT');\n      rotationAngle += 90;\n      if (tetromino.collidesWith(this.state.boardMatrix)) {\n        if (tetromino.row < 0) {\n          tetromino.row = 0;\n        } else if (tetromino.column < 0) {\n          tetromino.column = 0;\n        } else if (tetromino.column + tetromino.matrix.length > this.settings.columns) {\n          const tempColum = tetromino.column;\n          tetromino.column = this.settings.columns - tetromino.matrix.length;\n          if (tetromino.collidesWith(this.state.boardMatrix)) {\n            tetromino.column = tempColum;\n            tetromino.matrix = rotateMatrix(tetromino.matrix, 'LEFT');\n            rotationAngle -= 90;\n          }\n        } else {\n          tetromino.matrix = rotateMatrix(tetromino.matrix, 'LEFT');\n          rotationAngle -= 90;\n        }\n      }\n      //restores animation\n      this.setState({\n        tetromino,\n        rotationAngle,\n        animation: true\n      });\n    };\n    this.handleClick = (event, index) => {\n      const newBoard = this.state.boardMatrix.slice();\n      const content = newBoard[index.row][index.column] !== 0 ? [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] : [0, 0, 0, 0, 0, 2, 2, 2, 0, 0];\n      newBoard[index.row] = content;\n      this.setState({\n        boardMatrix: newBoard\n      });\n    };\n    this.handleKeyboard = () => {\n      window.addEventListener('keydown', e => {\n        const key = settings.keys;\n        //if e.keyCode is not one of the keys that operates Tetromino, returns\n        if (!Object.values(key).includes(e.keyCode)) return;\n        switch (e.keyCode) {\n          case key.left:\n            this.moveTetromino('LEFT');\n            break;\n          case key.right:\n            this.moveTetromino('RIGHT');\n            break;\n          case key.down:\n            this.moveTetromino('DOWN');\n            break;\n          case key.rotate:\n            this.rotateTetromino('RIGHT');\n            break;\n          case key.pause:\n            this.setState(prevState => ({\n              paused: prevState.paused ? false : true\n            }));\n            return;\n          case key.bottom:\n            this.moveTetromino('BOTTOM');\n            break;\n          default:\n            console.log('error. No such keyCode');\n        }\n      });\n    };\n    this.completedLines = () => {\n      const linesArray = [];\n      this.state.boardMatrix.forEach((row, rowIndex) => row.some(column => column === 0) ? null //some elements are 0, so it's not empty\n      : linesArray.push(rowIndex) //none element is 0, so it's full\n      );\n      return linesArray;\n    };\n    this.clearCompletedLines = completedLines => {\n      const newBoard = this.state.boardMatrix.slice();\n      for (let completedLine of completedLines) {\n        newBoard.splice(completedLine, 1);\n        newBoard.unshift(new Array(this.settings.columns).fill(0));\n      }\n      this.setState({\n        boardMatrix: newBoard\n      });\n    };\n    this.gameOver = () => {\n      const boardMatrix = this.initializeBoard();\n      this.setState({\n        boardMatrix\n      });\n    };\n    this.insertTetrominoInBoard = () => {\n      const boardMatrix = this.state.boardMatrix.slice();\n      const {\n        tetromino\n      } = this.state;\n      tetromino.matrix.map((row, rowIndex) => row.map((column, columnIndex) => {\n        if (tetromino.matrix[rowIndex][columnIndex] !== 0) {\n          try {\n            boardMatrix[rowIndex + tetromino.row][columnIndex + tetromino.column] = tetromino.matrix[rowIndex][columnIndex];\n          } catch (error) {\n            alert(error);\n          }\n        }\n      }));\n      this.setState({\n        boardMatrix,\n        animation: false\n      });\n    };\n    this.updatePoints = completedLines => {\n      let {\n        points\n      } = this.state;\n      let extraPoints = 0;\n      for (let i = 0; i < completedLines; i++) {\n        extraPoints += i * 200;\n      }\n      points += extraPoints + this.settings.pointsPerLine * completedLines;\n      this.setState(prevState => ({\n        points,\n        completedLines: prevState.completedLines + completedLines\n      }));\n    };\n    this.renderBoard = () => {\n      return this.state.boardMatrix.map((row, rowIndex) => row.map((column, columnIndex) => {\n        const content = this.state.boardMatrix[rowIndex][columnIndex];\n        return /*#__PURE__*/_jsxDEV(Block, {\n          backgroundColor: content !== 0 ? this.settings.tetrominoesColors[content - 1] : this.settings.boardColor,\n          settings: this.settings,\n          index: {\n            row: rowIndex,\n            column: columnIndex\n          },\n          content: content,\n          id: \"id\" + columnIndex + rowIndex,\n          onClick: this.handleClick\n        }, \"key\" + columnIndex + rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this);\n      }));\n    };\n    this.componentWillMount = () => {\n      this.mainLoop();\n    };\n    this.changeInterval = () => {\n      const intervalDecrement = this.state.intervalTime <= 500 ? 0 : 100;\n      this.setState(prev => ({\n        intervalTime: prev.intervalTime - intervalDecrement\n      }));\n    };\n    this.mainLoop = () => {\n      clearInterval(this.state.intervalId);\n      let tetromino = Object.assign(new TetrominoModel(), this.state.tetromino);\n      if (!this.state.paused) {\n        tetromino.row++;\n      }\n      if (tetromino.collidesWith(this.state.boardMatrix)) {\n        tetromino = this.getNewTetromino();\n        this.insertTetrominoInBoard();\n        const completedLinesArray = this.completedLines();\n        if (completedLinesArray.length > 0) {\n          this.clearCompletedLines(completedLinesArray);\n          this.updatePoints(completedLinesArray.length);\n        } else {\n          if (this.state.boardMatrix[1].some(x => x !== 0)) {\n            this.gameOver();\n          }\n        }\n        this.changeInterval();\n      }\n      const intervalId = setTimeout(() => this.mainLoop(), this.state.intervalTime);\n      this.setState({\n        tetromino,\n        intervalId\n      });\n    };\n    this.renderScore = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'white'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.intervalTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"PAUSED: \", this.state.paused ? ' true' : ' false']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"POINTS: \", this.state.points]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"LINES: \", this.state.completedLines]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"X: \", this.state.tetromino.column, \", Y: \", this.state.tetromino.row]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 7\n      }, this);\n    };\n    this.settings = Object.assign({}, settings, props.settings);\n    this.handleKeyboard();\n    const _tetromino = new TetrominoModel(3, 0, Math.random() * 7 | 0);\n    this.state = {\n      boardMatrix: this.initializeBoard(),\n      tetrominoesArray: this.initializeTetrominoesArray(),\n      tetromino: _tetromino,\n      tetrominoMatrix: _tetromino.matrix,\n      intervalId: 0,\n      intervalTime: this.settings.intervalTimeInMiliSeconds,\n      paused: false,\n      points: 0,\n      completedLines: 0,\n      level: 1,\n      rotationAngle: 0,\n      animation: this.settings.animation\n    };\n  }\n  render() {\n    const style = {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 0,\n      height: '100vh'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          settings: this.settings,\n          matrix: this.state.boardMatrix,\n          children: [/*#__PURE__*/_jsxDEV(Tetromino, {\n            ...this.state.tetromino,\n            matrix: this.state.tetrominoMatrix,\n            index: this.state.tetrominoesArray[0],\n            settings: this.settings,\n            angle: this.state.rotationAngle,\n            animation: this.settings.animation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tetromino, {\n            ...this.state.tetromino,\n            matrix: TetrominoModel.getTetrominoesArray()[this.state.tetrominoesArray[0]],\n            row: 10,\n            column: 11,\n            index: this.state.tetrominoesArray[0],\n            settings: this.settings,\n            angle: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Score, {\n            row: 5,\n            column: 11,\n            settings: this.settings,\n            points: this.state.points,\n            level: this.state.level,\n            lines: this.state.completedLines\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {\n          settings: this.settings,\n          moveLeft: () => this.moveTetromino('LEFT'),\n          moveRight: () => this.moveTetromino('RIGHT'),\n          rotate: () => this.rotateTetromino(),\n          moveDown: () => this.moveTetromino('DOWN')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Tetromino","Board","Block","Controls","Score","settings","createMatrix","rotateMatrix","TetrominoModel","jsxDEV","_jsxDEV","Tetris","constructor","props","initializeBoard","rows","columns","initializeTetrominoesArray","numberOfTetrominoes","getNumberOfTetrominoes","tetrominoesArray","Array","fill","map","spot","Math","random","getStartPoint","matrix","finalRow","finalColumn","rowIndex","length","row","some","cell","columnIndex","state","boardMatrix","column","getNewTetromino","tetrominoIndex","shift","startPoint","getTetrominoesArray","newTetromino","tetrominoMatrix","push","setState","rotationAngle","getFreeBottomRow","tetromino","Object","assign","initialRow","collidesWith","result","moveTetromino","direction","bind","rowAdvance","columnAdvance","mustUpdate","console","log","animation","rotateTetromino","tempColum","handleClick","event","index","newBoard","slice","content","handleKeyboard","window","addEventListener","e","key","keys","values","includes","keyCode","left","right","down","rotate","pause","prevState","paused","bottom","completedLines","linesArray","forEach","clearCompletedLines","completedLine","splice","unshift","gameOver","insertTetrominoInBoard","error","alert","updatePoints","points","extraPoints","i","pointsPerLine","renderBoard","backgroundColor","tetrominoesColors","boardColor","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","componentWillMount","mainLoop","changeInterval","intervalDecrement","intervalTime","prev","clearInterval","intervalId","completedLinesArray","x","setTimeout","renderScore","style","color","children","intervalTimeInMiliSeconds","level","render","display","justifyContent","alignItems","zIndex","height","angle","lines","moveLeft","moveRight","moveDown"],"sources":["/home/dreaminsub/ReactProjects/gameSharing/game_sharing/src/components/react-tetris/src/components/tetris/tetris.js"],"sourcesContent":["//@flow\nimport React, { Component } from 'react'\nimport { Tetromino } from './tetromino'\nimport { Board } from './board'\nimport { Block } from './block'\nimport { Controls } from './Controls'\nimport { Score } from './Score'\nimport { settings } from './settings'\nimport { createMatrix, rotateMatrix } from './helpers'\nimport TetrominoModel from '../../models/tetromino-model'\ntype Props = {\n  settings: typeof settings\n}\ntype State = {\n  boardMatrix: number[][],\n  tetrominoesArray: number[],\n  tetromino: TetrominoModel,\n  intervalId: number,\n  intervalTime: number,\n  paused: boolean,\n  points: number,\n  completedLines: number,\n  level: number,\n  rotationAngle: number,\n  tetrominoMatrix: number[][],\n  animation: boolean,\n}\nexport default class Tetris extends Component {\n  boardMatrix: number[][]\n  settings: typeof settings\n  tetrominoesColors: string[]\n  state: State\n  constructor(props: Props) {\n    super(props)\n    this.settings = Object.assign({}, settings, props.settings)\n    this.handleKeyboard()\n    const tetromino = new TetrominoModel(3, 0, Math.random() * 7 | 0)\n    this.state = {\n      boardMatrix: this.initializeBoard(),\n      tetrominoesArray: this.initializeTetrominoesArray(),\n      tetromino: tetromino,\n      tetrominoMatrix: tetromino.matrix,\n      intervalId: 0,\n      intervalTime: this.settings.intervalTimeInMiliSeconds,\n      paused: false,\n      points: 0,\n      completedLines: 0,\n      level: 1,\n      rotationAngle: 0,\n      animation: this.settings.animation,\n    }\n\n  }\n  initializeBoard = () => {\n    return createMatrix(this.settings.rows, this.settings.columns)\n  }\n  initializeTetrominoesArray = () => {\n    const numberOfTetrominoes = TetrominoModel.getNumberOfTetrominoes()\n    const tetrominoesArray = new Array(numberOfTetrominoes)\n      .fill(null)\n      .map(spot => Math.random() * numberOfTetrominoes | 0)\n\n    return tetrominoesArray\n\n\n\n  }\n  getStartPoint = (matrix: number[][]): { row: number, column: number } => {\n    let finalRow = 0, finalColumn = 0\n    for (let rowIndex = 0; rowIndex < matrix.length; rowIndex++) {\n      const row = matrix[rowIndex]\n      if (row.some(cell => cell !== 0)) {\n        const columnIndex = (this.state.boardMatrix[0].length / 2 - matrix.length / 2) | 0\n        finalRow = 0 - rowIndex\n        finalColumn = columnIndex\n        return { row: finalRow, column: finalColumn }\n      }\n    }\n    return { row: 0, column: 0 }\n\n  }\n  getNewTetromino = (): TetrominoModel => {\n    const {tetrominoesArray} = this.state\n    const tetrominoIndex = tetrominoesArray.shift()\n    const startPoint = this.getStartPoint(TetrominoModel.getTetrominoesArray()[tetrominoIndex])\n    const newTetromino = new TetrominoModel(startPoint.column, startPoint.row, tetrominoIndex)\n    const tetrominoMatrix = newTetromino.matrix\n    tetrominoesArray.push(Math.random() * TetrominoModel.getNumberOfTetrominoes() | 0)\n    this.setState({ tetrominoesArray, tetrominoMatrix, rotationAngle: 0 })\n\n    return newTetromino\n  }\n  getFreeBottomRow = (): number => {\n    const tetromino: TetrominoModel = Object.assign(new TetrominoModel(), this.state.tetromino)\n    const initialRow = tetromino.row\n    tetromino.row++\n    while (!tetromino.collidesWith(this.state.boardMatrix)) {\n      tetromino.row++\n    }\n    const result = tetromino.row - initialRow - 1\n    return result\n  }\n  moveTetromino = (direction: 'DOWN' | 'LEFT' | 'RIGHT' | 'BOTTOM'): void => {\n    let tetromino = Object.assign(new TetrominoModel(), this.state.tetromino)\n    tetromino.collidesWith.bind(tetromino)\n    let rowAdvance = 0, columnAdvance = 0\n    let mustUpdate = true\n\n    const {boardMatrix} = this.state\n    switch (direction) {\n      case 'DOWN':\n        rowAdvance++\n        break\n      case 'LEFT':\n        columnAdvance--\n        break\n      case 'RIGHT':\n        columnAdvance++\n        break\n      case 'BOTTOM':\n        rowAdvance += this.getFreeBottomRow()\n        break\n      default:\n        console.log('error. No such direction')\n    }\n    tetromino.row += rowAdvance\n    tetromino.column += columnAdvance\n    //If collided, move back\n    if (tetromino.collidesWith(boardMatrix)) {\n\n      tetromino.row -= rowAdvance\n      tetromino.column -= columnAdvance\n      mustUpdate = false\n    }\n    //restores animation\n    if (mustUpdate) {\n      this.setState({ tetromino, animation: true })\n    }\n\n  }\n\n  rotateTetromino = () => {\n    let tetromino = Object.assign(new TetrominoModel(), this.state.tetromino)\n    let rotationAngle = this.state.rotationAngle\n    tetromino.matrix = rotateMatrix(tetromino.matrix, 'RIGHT')\n    rotationAngle += 90\n    if (tetromino.collidesWith(this.state.boardMatrix)) {\n      if (tetromino.row < 0) {\n        tetromino.row = 0\n      } else if (tetromino.column < 0) {\n        tetromino.column = 0\n      } else if (tetromino.column + tetromino.matrix.length > this.settings.columns) {\n        const tempColum = tetromino.column\n        tetromino.column = this.settings.columns - tetromino.matrix.length\n        if (tetromino.collidesWith(this.state.boardMatrix)) {\n          tetromino.column = tempColum\n          tetromino.matrix = rotateMatrix(tetromino.matrix, 'LEFT')\n          rotationAngle -= 90\n        }\n      } else {\n        tetromino.matrix = rotateMatrix(tetromino.matrix, 'LEFT')\n        rotationAngle -= 90\n      }\n    }\n    //restores animation\n    this.setState({ tetromino, rotationAngle, animation: true })\n  }\n  handleClick = (event: Event, index: { column: number, row: number }) => {\n    const newBoard = this.state.boardMatrix.slice()\n    const content = newBoard[index.row][index.column] !== 0\n      ? [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n      : [0, 0, 0, 0, 0, 2, 2, 2, 0, 0]\n    newBoard[index.row] = content\n    this.setState(\n      {\n        boardMatrix: newBoard\n      })\n\n  }\n\n  handleKeyboard = () => {\n    window.addEventListener('keydown', e => {\n      const key = settings.keys\n      //if e.keyCode is not one of the keys that operates Tetromino, returns\n      if (!Object.values(key).includes(e.keyCode)) return\n\n      switch (e.keyCode) {\n        case key.left:\n          this.moveTetromino('LEFT')\n          break\n        case key.right:\n          this.moveTetromino('RIGHT')\n          break\n        case key.down:\n          this.moveTetromino('DOWN')\n          break\n        case key.rotate:\n          this.rotateTetromino('RIGHT')\n          break\n        case key.pause:\n          this.setState((prevState) => ({ paused: prevState.paused ? false : true }))\n          return\n        case key.bottom:\n          this.moveTetromino('BOTTOM')\n          break\n        default:\n          console.log('error. No such keyCode')\n      }\n    })\n  }\n\n  completedLines = (): number[] => {\n    const linesArray = []\n    this.state.boardMatrix.forEach((row, rowIndex) =>\n      (row.some(column =>\n        column === 0)\n        ? null //some elements are 0, so it's not empty\n        : linesArray.push(rowIndex) //none element is 0, so it's full\n      ))\n    return linesArray\n  }\n  clearCompletedLines = (completedLines: number[]) => {\n    const newBoard = this.state.boardMatrix.slice()\n    for (let completedLine of completedLines) {\n      newBoard.splice(completedLine, 1)\n      newBoard.unshift(new Array(this.settings.columns).fill(0))\n    }\n    this.setState({\n      boardMatrix: newBoard\n    })\n  }\n  gameOver = () => {\n\n    const boardMatrix = this.initializeBoard()\n    this.setState({ boardMatrix })\n\n  }\n  insertTetrominoInBoard = () => {\n    const boardMatrix = this.state.boardMatrix.slice()\n    const {tetromino} = this.state\n    tetromino.matrix.map((row, rowIndex) =>\n      row.map((column, columnIndex) => {\n        if (tetromino.matrix[rowIndex][columnIndex] !== 0) {\n          try {\n            boardMatrix[rowIndex + tetromino.row][columnIndex + tetromino.column] = tetromino.matrix[rowIndex][columnIndex]\n          } catch (error) {\n            alert(error)\n          }\n        }\n      }\n      ))\n    this.setState({ boardMatrix, animation: false })\n\n  }\n  updatePoints = (completedLines: number) => {\n    let {points} = this.state\n    let extraPoints = 0\n    for (let i = 0; i < completedLines; i++) {\n      extraPoints += (i * 200)\n    }\n    points += extraPoints + this.settings.pointsPerLine * completedLines\n    this.setState((prevState: State) => ({ points, completedLines: prevState.completedLines + completedLines }))\n  }\n  renderBoard = () => {\n    return (\n      this.state.boardMatrix.map((row, rowIndex) =>\n        row.map((column, columnIndex) => {\n          const content = this.state.boardMatrix[rowIndex][columnIndex]\n          return (\n            <Block\n              backgroundColor={content !== 0 ?\n                this.settings.tetrominoesColors[content - 1] :\n                this.settings.boardColor\n              }\n              settings={this.settings}\n              key={\"key\" + columnIndex + rowIndex}\n              index={{ row: rowIndex, column: columnIndex }}\n              content={content}\n              id={\"id\" + columnIndex + rowIndex}\n              onClick={this.handleClick}\n              />)\n        })\n      )\n    )\n  }\n  componentWillMount = () => {\n    this.mainLoop()\n  }\n\n  changeInterval = () => {\n    const intervalDecrement = this.state.intervalTime <= 500\n      ? 0\n      : 100\n    this.setState((prev: State) => ({ intervalTime: prev.intervalTime - intervalDecrement }))\n  }\n  mainLoop = () => {\n    clearInterval(this.state.intervalId)\n    let tetromino = Object.assign(new TetrominoModel(), this.state.tetromino)\n    if (!this.state.paused) {\n      tetromino.row++\n    }\n    if (tetromino.collidesWith(this.state.boardMatrix)) {\n      tetromino = this.getNewTetromino()\n      this.insertTetrominoInBoard()\n      const completedLinesArray = this.completedLines()\n      if (completedLinesArray.length > 0) {\n        this.clearCompletedLines(completedLinesArray)\n        this.updatePoints(completedLinesArray.length)\n      } else {\n        if (this.state.boardMatrix[1].some(x => x !== 0)) {\n          this.gameOver()\n        }\n      }\n      this.changeInterval()\n    }\n\n    const intervalId = setTimeout(() => this.mainLoop(), this.state.intervalTime)\n    this.setState({ tetromino, intervalId })\n  }\n  renderScore = () => {\n    return (\n      <div style={{ color: 'white' }}>\n        <div>{this.state.intervalTime}</div>\n        <div>PAUSED: {this.state.paused ? ' true' : ' false'}</div>\n        <div>POINTS: {this.state.points}</div>\n        <div>LINES: {this.state.completedLines}</div>\n        <div>X: {this.state.tetromino.column}, Y: {this.state.tetromino.row}</div>\n      </div>\n    )\n  }\n  render() {\n    const style = {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 0,\n      height: '100vh',\n      \n    }\n    return (\n      <div style={style}>\n        \n        <div >\n          \n          <Board settings={this.settings} matrix={this.state.boardMatrix}>\n            <Tetromino\n              {...this.state.tetromino}\n              matrix={this.state.tetrominoMatrix}\n              index={this.state.tetrominoesArray[0]}\n              settings={this.settings}\n              angle={this.state.rotationAngle}\n              animation={this.settings.animation}\n\n              />\n             \n            <Tetromino\n              {...this.state.tetromino}\n              matrix={TetrominoModel.getTetrominoesArray()[this.state.tetrominoesArray[0]]}\n              row={10}\n              column={11}\n              index={this.state.tetrominoesArray[0]}\n              settings={this.settings}\n              angle={0}\n            />\n            <Score\n              row={5}\n              column={11}\n              settings={this.settings}\n              points={this.state.points}\n              level = {this.state.level}\n              lines = {this.state.completedLines}\n            />\n          </Board>\n          <Controls\n            settings = {this.settings}\n            moveLeft={()=>this.moveTetromino('LEFT')}\n            moveRight={()=>this.moveTetromino('RIGHT')}\n            rotate ={()=>this.rotateTetromino()}\n            moveDown={()=>this.moveTetromino('DOWN')}\n\n          \n          />\n        </div>\n\n        \n      </div>\n    )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}